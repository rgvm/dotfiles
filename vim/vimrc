" plugins
call plug#begin('~/.vim/bundle')

Plug 'chriskempson/base16-vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'leafgarland/typescript-vim'
Plug 'lervag/vimtex'
Plug 'mattn/emmet-vim'
Plug 'pangloss/vim-javascript'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'valloric/youcompleteme', { 'do': './install.py' }
Plug 'w0rp/ale'

call plug#end()

" color
let base16colorspace=256  " Access colors present in 256 colorspace
colorscheme base16-gruvbox-dark-medium

" syntax
syntax enable
set encoding=utf-8

" indentation
filetype plugin indent on
set expandtab tabstop=4 shiftwidth=4
autocmd filetype html setlocal expandtab tabstop=2 shiftwidth=2

" split settings
set splitbelow
set splitright

" hybrid line numbering
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | set nornu | endif
augroup END
set number relativenumber

" custom statusline
set statusline=%!Status()
set laststatus=2

function! Status() abort

    function! LHS()
        let line_col = ''
        let line_num = line('$')
        let width = max([strlen(line_num), (&numberwidth - 1)]) + &l:foldcolumn
        let padding = width - strlen(line_num)
        if padding <= 0
            let line_col .= line_num
        else
            let line_col .= repeat(' ', padding + 1) . line_num
        endif
        return line_col . ' '
    endfunction

    function! ReadOnly()
        if &readonly || !&modifiable
            return ' ' . '[]'
        else
            return ''
    endfunction

    function! FileEnc()
        if &fenc != 'utf-8'
            return ' ' . &fenc
        else
            return ''
    endfunction

    function! RHS()
        let curr_col = virtcol('.')
        let num_cols = virtcol('$')
        let padding = max([0, 5 - strlen(curr_col) - strlen(num_cols)])
        let rhs = repeat(' ', padding + 1)
        let rhs .= 'Ͼ:'
        let rhs .= curr_col
        let rhs .= '/'
        let rhs .= num_cols
        return rhs
    endfunction

    let stat = ''

    let stat .= '%1*'
    let stat .= '%{LHS()}'
    let stat .= '%*'

    if exists('*fugitive#head') && fugitive#head() != ''
        let stat .= '%2*'
        let stat .= '  '
        let stat .= fugitive#head()
        let stat .= '%3*'
        let stat .= ''
        let stat .= '%*'
    endif

    let stat .= '%<'
    let stat .= '%4*'
    let stat .= ' '
    let stat .= '%F'
    let stat .= '%{ReadOnly()}'
    let stat .= '%='
    let stat .= '%y'
    let stat .= '%{FileEnc()}'
    let stat .= ' '
    let stat .= '%*'
    let stat .= '%3*'
    let stat .= ''
    let stat .= '%2*'
    let stat .= '%{RHS()}'
    let stat .= '%*'

    return stat
endfunction

highlight User1 ctermfg=11, ctermbg=18
highlight User2 ctermfg=15, ctermbg=12
highlight User3 ctermfg=12, ctermbg=18
highlight User4 ctermfg=7, ctermbg=18

" set mapleader as space
nnoremap <SPACE> <Nop>
let mapleader=" "

" yank text to the OSX clipboard
noremap <leader>y "*y
noremap <leader>yy "*Y

" preserve indentation while pasting text from the OSX clipboard
nnoremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

" quit without saving
nnoremap <leader>Q :q!<cr>
" quit
nnoremap <leader>q :q<cr>
" save file
nnoremap <leader>w :w<cr>

" split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" buffer navigation
set hidden
nmap <leader>l :bnext<CR>
nmap <leader>h :bprevious<CR>
nmap <leader>bq :bp <BAR> bd #<CR>

" jj as escape in insert mode
inoremap jj <Esc>

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion = 1

" NERDTree
nnoremap <Leader>n :NERDTreeToggle<CR>
nnoremap <silent> <Leader>f :NERDTreeFind<CR>
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeDirArrows = 1

" CtrlP
let g:ctrlp_map = '\'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_mruf_relative = 1

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
